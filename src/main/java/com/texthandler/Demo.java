
package com.texthandler;

import com.texthandler.composite.TextComponent;
import com.texthandler.operation.*;
import com.texthandler.parser.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
 */
public class Demo {
    private static final Logger logger = LogManager.getLogger(Demo.class);
    
    public static void main(String[] args) {
        try {
            // –ß—Ç–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
            String inputText = Files.readString(Paths.get("src/main/resources/input.txt"));
            TextComponent parsedText = createParserChain().parse(inputText);
            
            System.out.println("=== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –û–ü–ï–†–ê–¶–ò–ô ===\n");
            System.out.println("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:");
            System.out.println(parsedText.restore());
            System.out.println("\n" + "=".repeat(80) + "\n");
            
            // –ü–†–Ø–ú–´–ï –í–´–ó–û–í–´ –í–°–ï–• –û–ü–ï–†–ê–¶–ò–ô:
            
            // 1. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∞–±–∑–∞—Ü–µ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            executeOperation("–û–ü–ï–†–ê–¶–ò–Ø 1: –°–û–†–¢–ò–†–û–í–ö–ê –ê–ë–ó–ê–¶–ï–í", 
                           new SortParagraphsBySentenceCountOperation(), parsedText);
            
            // 2. –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å —Å–∞–º—ã–º –¥–ª–∏–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º
            executeOperation("–û–ü–ï–†–ê–¶–ò–Ø 2: –ü–û–ò–°–ö –°–ê–ú–´–• –î–õ–ò–ù–ù–´–• –°–õ–û–í", 
                           new FindSentencesWithLongestWordOperation(), parsedText);
            
            // 3. –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (—Å –ó–ê–î–ê–ù–ù–´–ú –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è –¥–µ–º–æ)
            executeOperation("–û–ü–ï–†–ê–¶–ò–Ø 3: –£–î–ê–õ–ï–ù–ò–ï –ö–û–†–û–¢–ö–ò–• –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô (–º–∏–Ω–∏–º—É–º 5 —Å–ª–æ–≤)", 
                           new RemoveShortSentencesOperation(5), parsedText);
            
            // 4. –ü–æ–¥—Å—á–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–ª–æ–≤
            executeOperation("–û–ü–ï–†–ê–¶–ò–Ø 4: –ü–û–î–°–ß–ï–¢ –û–î–ò–ù–ê–ö–û–í–´–• –°–õ–û–í", 
                           new CountIdenticalWordsOperation(), parsedText);
            
            // 5. –ü–æ–¥—Å—á–µ—Ç –≥–ª–∞—Å–Ω—ã—Ö –∏ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö
            executeOperation("–û–ü–ï–†–ê–¶–ò–Ø 5: –ê–ù–ê–õ–ò–ó –ì–õ–ê–°–ù–´–• –ò –°–û–ì–õ–ê–°–ù–´–•", 
                           new CountVowelsConsonantsOperation(), parsedText);
            
            System.out.println("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!");
            
        } catch (IOException e) {
            logger.error("Error reading input file", e);
            System.out.println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + e.getMessage());
        } catch (Exception e) {
            logger.error("Error in demo", e);
            System.out.println("–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
        }
    }
    
    private static void executeOperation(String title, TextOperation operation, TextComponent text) {
        System.out.println("üî∏ " + title);
        System.out.println("–û–ø–∏—Å–∞–Ω–∏–µ: " + operation.getDescription());
        System.out.println("-".repeat(60));
        
        try {
            String result = operation.execute(text);
            System.out.println(result);
        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: " + e.getMessage());
            logger.error("Error executing operation: " + operation.getName(), e);
        }
        
        System.out.println("=".repeat(80) + "\n");
    }
    
    private static TextParser createParserChain() {
        TextParser textParser = new TextLevelParser();
        TextParser paragraphParser = new ParagraphLevelParser();
        TextParser sentenceParser = new SentenceLevelParser();
        TextParser lexemeParser = new LexemeLevelParser();
        
        textParser.setNext(paragraphParser);
        paragraphParser.setNext(sentenceParser);
        sentenceParser.setNext(lexemeParser);
        
        return textParser;
    }
}